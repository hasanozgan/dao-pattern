// Code generated by MockGen. DO NOT EDIT.
// Source: order_item.go

// Package repositories is a generated GoMock package.
package repositories

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	models "github.com/netology/dao-pattern/models"
	reflect "reflect"
)

// MockOrderItemRepository is a mock of OrderItemRepository interface
type MockOrderItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderItemRepositoryMockRecorder
}

// MockOrderItemRepositoryMockRecorder is the mock recorder for MockOrderItemRepository
type MockOrderItemRepositoryMockRecorder struct {
	mock *MockOrderItemRepository
}

// NewMockOrderItemRepository creates a new mock instance
func NewMockOrderItemRepository(ctrl *gomock.Controller) *MockOrderItemRepository {
	mock := &MockOrderItemRepository{ctrl: ctrl}
	mock.recorder = &MockOrderItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrderItemRepository) EXPECT() *MockOrderItemRepositoryMockRecorder {
	return m.recorder
}

// GetByOrderID mocks base method
func (m *MockOrderItemRepository) GetByOrderID(orderID models.OrderID) ([]*models.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrderID", orderID)
	ret0, _ := ret[0].([]*models.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrderID indicates an expected call of GetByOrderID
func (mr *MockOrderItemRepositoryMockRecorder) GetByOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrderID", reflect.TypeOf((*MockOrderItemRepository)(nil).GetByOrderID), orderID)
}

// SaveWithTransaction mocks base method
func (m *MockOrderItemRepository) SaveWithTransaction(tx *sql.Tx, orderItem *models.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithTransaction", tx, orderItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithTransaction indicates an expected call of SaveWithTransaction
func (mr *MockOrderItemRepositoryMockRecorder) SaveWithTransaction(tx, orderItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithTransaction", reflect.TypeOf((*MockOrderItemRepository)(nil).SaveWithTransaction), tx, orderItem)
}

// Save mocks base method
func (m *MockOrderItemRepository) Save(orderItem *models.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", orderItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockOrderItemRepositoryMockRecorder) Save(orderItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockOrderItemRepository)(nil).Save), orderItem)
}
